/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
	"time"
)

// User The Twitter User object
type User struct {
	// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	Id string `json:"id"`
	// Creation time of this user.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The friendly name of this user, as shown on their profile.
	Name string `json:"name"`
	// The Twitter handle (screen name) of this user.
	Username string `json:"username"`
	// Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private).
	Protected *bool `json:"protected,omitempty"`
	// Indicate if this user is a verified Twitter User.
	Verified *bool `json:"verified,omitempty"`
	Withheld *UserWithheld `json:"withheld,omitempty"`
	// The URL to the profile image for this user.
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`
	// The location specified in the user's profile, if the user provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.
	Location *string `json:"location,omitempty"`
	// The URL specified in the user's profile.
	Url *string `json:"url,omitempty"`
	// The text of this user's profile description (also known as bio), if the user provided one.
	Description *string `json:"description,omitempty"`
	Entities *UserEntities `json:"entities,omitempty"`
	// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	PinnedTweetId *string `json:"pinned_tweet_id,omitempty"`
	PublicMetrics *UserPublicMetrics `json:"public_metrics,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(id string, name string, username string) *User {
	this := User{}
	this.Id = id
	this.Name = name
	this.Username = username
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value
func (o *User) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *User) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *User) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *User) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetName returns the Name field value
func (o *User) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *User) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *User) SetName(v string) {
	o.Name = v
}

// GetUsername returns the Username field value
func (o *User) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *User) SetUsername(v string) {
	o.Username = v
}

// GetProtected returns the Protected field value if set, zero value otherwise.
func (o *User) GetProtected() bool {
	if o == nil || o.Protected == nil {
		var ret bool
		return ret
	}
	return *o.Protected
}

// GetProtectedOk returns a tuple with the Protected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetProtectedOk() (*bool, bool) {
	if o == nil || o.Protected == nil {
		return nil, false
	}
	return o.Protected, true
}

// HasProtected returns a boolean if a field has been set.
func (o *User) HasProtected() bool {
	if o != nil && o.Protected != nil {
		return true
	}

	return false
}

// SetProtected gets a reference to the given bool and assigns it to the Protected field.
func (o *User) SetProtected(v bool) {
	o.Protected = &v
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *User) GetVerified() bool {
	if o == nil || o.Verified == nil {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetVerifiedOk() (*bool, bool) {
	if o == nil || o.Verified == nil {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *User) HasVerified() bool {
	if o != nil && o.Verified != nil {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *User) SetVerified(v bool) {
	o.Verified = &v
}

// GetWithheld returns the Withheld field value if set, zero value otherwise.
func (o *User) GetWithheld() UserWithheld {
	if o == nil || o.Withheld == nil {
		var ret UserWithheld
		return ret
	}
	return *o.Withheld
}

// GetWithheldOk returns a tuple with the Withheld field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetWithheldOk() (*UserWithheld, bool) {
	if o == nil || o.Withheld == nil {
		return nil, false
	}
	return o.Withheld, true
}

// HasWithheld returns a boolean if a field has been set.
func (o *User) HasWithheld() bool {
	if o != nil && o.Withheld != nil {
		return true
	}

	return false
}

// SetWithheld gets a reference to the given UserWithheld and assigns it to the Withheld field.
func (o *User) SetWithheld(v UserWithheld) {
	o.Withheld = &v
}

// GetProfileImageUrl returns the ProfileImageUrl field value if set, zero value otherwise.
func (o *User) GetProfileImageUrl() string {
	if o == nil || o.ProfileImageUrl == nil {
		var ret string
		return ret
	}
	return *o.ProfileImageUrl
}

// GetProfileImageUrlOk returns a tuple with the ProfileImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetProfileImageUrlOk() (*string, bool) {
	if o == nil || o.ProfileImageUrl == nil {
		return nil, false
	}
	return o.ProfileImageUrl, true
}

// HasProfileImageUrl returns a boolean if a field has been set.
func (o *User) HasProfileImageUrl() bool {
	if o != nil && o.ProfileImageUrl != nil {
		return true
	}

	return false
}

// SetProfileImageUrl gets a reference to the given string and assigns it to the ProfileImageUrl field.
func (o *User) SetProfileImageUrl(v string) {
	o.ProfileImageUrl = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *User) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *User) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *User) SetLocation(v string) {
	o.Location = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *User) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *User) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *User) SetUrl(v string) {
	o.Url = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *User) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *User) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *User) SetDescription(v string) {
	o.Description = &v
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *User) GetEntities() UserEntities {
	if o == nil || o.Entities == nil {
		var ret UserEntities
		return ret
	}
	return *o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEntitiesOk() (*UserEntities, bool) {
	if o == nil || o.Entities == nil {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *User) HasEntities() bool {
	if o != nil && o.Entities != nil {
		return true
	}

	return false
}

// SetEntities gets a reference to the given UserEntities and assigns it to the Entities field.
func (o *User) SetEntities(v UserEntities) {
	o.Entities = &v
}

// GetPinnedTweetId returns the PinnedTweetId field value if set, zero value otherwise.
func (o *User) GetPinnedTweetId() string {
	if o == nil || o.PinnedTweetId == nil {
		var ret string
		return ret
	}
	return *o.PinnedTweetId
}

// GetPinnedTweetIdOk returns a tuple with the PinnedTweetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPinnedTweetIdOk() (*string, bool) {
	if o == nil || o.PinnedTweetId == nil {
		return nil, false
	}
	return o.PinnedTweetId, true
}

// HasPinnedTweetId returns a boolean if a field has been set.
func (o *User) HasPinnedTweetId() bool {
	if o != nil && o.PinnedTweetId != nil {
		return true
	}

	return false
}

// SetPinnedTweetId gets a reference to the given string and assigns it to the PinnedTweetId field.
func (o *User) SetPinnedTweetId(v string) {
	o.PinnedTweetId = &v
}

// GetPublicMetrics returns the PublicMetrics field value if set, zero value otherwise.
func (o *User) GetPublicMetrics() UserPublicMetrics {
	if o == nil || o.PublicMetrics == nil {
		var ret UserPublicMetrics
		return ret
	}
	return *o.PublicMetrics
}

// GetPublicMetricsOk returns a tuple with the PublicMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPublicMetricsOk() (*UserPublicMetrics, bool) {
	if o == nil || o.PublicMetrics == nil {
		return nil, false
	}
	return o.PublicMetrics, true
}

// HasPublicMetrics returns a boolean if a field has been set.
func (o *User) HasPublicMetrics() bool {
	if o != nil && o.PublicMetrics != nil {
		return true
	}

	return false
}

// SetPublicMetrics gets a reference to the given UserPublicMetrics and assigns it to the PublicMetrics field.
func (o *User) SetPublicMetrics(v UserPublicMetrics) {
	o.PublicMetrics = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if o.Protected != nil {
		toSerialize["protected"] = o.Protected
	}
	if o.Verified != nil {
		toSerialize["verified"] = o.Verified
	}
	if o.Withheld != nil {
		toSerialize["withheld"] = o.Withheld
	}
	if o.ProfileImageUrl != nil {
		toSerialize["profile_image_url"] = o.ProfileImageUrl
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Entities != nil {
		toSerialize["entities"] = o.Entities
	}
	if o.PinnedTweetId != nil {
		toSerialize["pinned_tweet_id"] = o.PinnedTweetId
	}
	if o.PublicMetrics != nil {
		toSerialize["public_metrics"] = o.PublicMetrics
	}
	return json.Marshal(toSerialize)
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


