/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// ClientForbiddenProblem A problem that indicates your client is forbidden from making this request.
type ClientForbiddenProblem struct {
	Type *string `json:"type,omitempty"`
	Reason *string `json:"reason,omitempty"`
	RegistrationUrl *string `json:"registration_url,omitempty"`
	Title string `json:"title"`
	Detail string `json:"detail"`
}

// NewClientForbiddenProblem instantiates a new ClientForbiddenProblem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientForbiddenProblem(type_ string, title string, detail string) *ClientForbiddenProblem {
	this := ClientForbiddenProblem{}
	this.Type = &type_
	this.Title = title
	this.Detail = detail
	return &this
}

// NewClientForbiddenProblemWithDefaults instantiates a new ClientForbiddenProblem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientForbiddenProblemWithDefaults() *ClientForbiddenProblem {
	this := ClientForbiddenProblem{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ClientForbiddenProblem) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientForbiddenProblem) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ClientForbiddenProblem) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ClientForbiddenProblem) SetType(v string) {
	o.Type = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ClientForbiddenProblem) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientForbiddenProblem) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ClientForbiddenProblem) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ClientForbiddenProblem) SetReason(v string) {
	o.Reason = &v
}

// GetRegistrationUrl returns the RegistrationUrl field value if set, zero value otherwise.
func (o *ClientForbiddenProblem) GetRegistrationUrl() string {
	if o == nil || o.RegistrationUrl == nil {
		var ret string
		return ret
	}
	return *o.RegistrationUrl
}

// GetRegistrationUrlOk returns a tuple with the RegistrationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientForbiddenProblem) GetRegistrationUrlOk() (*string, bool) {
	if o == nil || o.RegistrationUrl == nil {
		return nil, false
	}
	return o.RegistrationUrl, true
}

// HasRegistrationUrl returns a boolean if a field has been set.
func (o *ClientForbiddenProblem) HasRegistrationUrl() bool {
	if o != nil && o.RegistrationUrl != nil {
		return true
	}

	return false
}

// SetRegistrationUrl gets a reference to the given string and assigns it to the RegistrationUrl field.
func (o *ClientForbiddenProblem) SetRegistrationUrl(v string) {
	o.RegistrationUrl = &v
}

// GetTitle returns the Title field value
func (o *ClientForbiddenProblem) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ClientForbiddenProblem) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ClientForbiddenProblem) SetTitle(v string) {
	o.Title = v
}

// GetDetail returns the Detail field value
func (o *ClientForbiddenProblem) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *ClientForbiddenProblem) GetDetailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *ClientForbiddenProblem) SetDetail(v string) {
	o.Detail = v
}

func (o ClientForbiddenProblem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.RegistrationUrl != nil {
		toSerialize["registration_url"] = o.RegistrationUrl
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["detail"] = o.Detail
	}
	return json.Marshal(toSerialize)
}

type NullableClientForbiddenProblem struct {
	value *ClientForbiddenProblem
	isSet bool
}

func (v NullableClientForbiddenProblem) Get() *ClientForbiddenProblem {
	return v.value
}

func (v *NullableClientForbiddenProblem) Set(val *ClientForbiddenProblem) {
	v.value = val
	v.isSet = true
}

func (v NullableClientForbiddenProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableClientForbiddenProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientForbiddenProblem(val *ClientForbiddenProblem) *NullableClientForbiddenProblem {
	return &NullableClientForbiddenProblem{value: val, isSet: true}
}

func (v NullableClientForbiddenProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientForbiddenProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


