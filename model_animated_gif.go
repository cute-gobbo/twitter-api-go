/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// AnimatedGif struct for AnimatedGif
type AnimatedGif struct {
	Type *string `json:"type,omitempty"`
	PreviewImageUrl *string `json:"preview_image_url,omitempty"`
	// The Media Key identifier for this attachment.
	MediaKey *string `json:"media_key,omitempty"`
	// The height of the media in pixels
	Height *int32 `json:"height,omitempty"`
	// The width of the media in pixels
	Width *int32 `json:"width,omitempty"`
}

// NewAnimatedGif instantiates a new AnimatedGif object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnimatedGif() *AnimatedGif {
	this := AnimatedGif{}
	return &this
}

// NewAnimatedGifWithDefaults instantiates a new AnimatedGif object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnimatedGifWithDefaults() *AnimatedGif {
	this := AnimatedGif{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AnimatedGif) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnimatedGif) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AnimatedGif) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AnimatedGif) SetType(v string) {
	o.Type = &v
}

// GetPreviewImageUrl returns the PreviewImageUrl field value if set, zero value otherwise.
func (o *AnimatedGif) GetPreviewImageUrl() string {
	if o == nil || o.PreviewImageUrl == nil {
		var ret string
		return ret
	}
	return *o.PreviewImageUrl
}

// GetPreviewImageUrlOk returns a tuple with the PreviewImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnimatedGif) GetPreviewImageUrlOk() (*string, bool) {
	if o == nil || o.PreviewImageUrl == nil {
		return nil, false
	}
	return o.PreviewImageUrl, true
}

// HasPreviewImageUrl returns a boolean if a field has been set.
func (o *AnimatedGif) HasPreviewImageUrl() bool {
	if o != nil && o.PreviewImageUrl != nil {
		return true
	}

	return false
}

// SetPreviewImageUrl gets a reference to the given string and assigns it to the PreviewImageUrl field.
func (o *AnimatedGif) SetPreviewImageUrl(v string) {
	o.PreviewImageUrl = &v
}

// GetMediaKey returns the MediaKey field value if set, zero value otherwise.
func (o *AnimatedGif) GetMediaKey() string {
	if o == nil || o.MediaKey == nil {
		var ret string
		return ret
	}
	return *o.MediaKey
}

// GetMediaKeyOk returns a tuple with the MediaKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnimatedGif) GetMediaKeyOk() (*string, bool) {
	if o == nil || o.MediaKey == nil {
		return nil, false
	}
	return o.MediaKey, true
}

// HasMediaKey returns a boolean if a field has been set.
func (o *AnimatedGif) HasMediaKey() bool {
	if o != nil && o.MediaKey != nil {
		return true
	}

	return false
}

// SetMediaKey gets a reference to the given string and assigns it to the MediaKey field.
func (o *AnimatedGif) SetMediaKey(v string) {
	o.MediaKey = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *AnimatedGif) GetHeight() int32 {
	if o == nil || o.Height == nil {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnimatedGif) GetHeightOk() (*int32, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *AnimatedGif) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *AnimatedGif) SetHeight(v int32) {
	o.Height = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *AnimatedGif) GetWidth() int32 {
	if o == nil || o.Width == nil {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnimatedGif) GetWidthOk() (*int32, bool) {
	if o == nil || o.Width == nil {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *AnimatedGif) HasWidth() bool {
	if o != nil && o.Width != nil {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *AnimatedGif) SetWidth(v int32) {
	o.Width = &v
}

func (o AnimatedGif) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.PreviewImageUrl != nil {
		toSerialize["preview_image_url"] = o.PreviewImageUrl
	}
	if o.MediaKey != nil {
		toSerialize["media_key"] = o.MediaKey
	}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	if o.Width != nil {
		toSerialize["width"] = o.Width
	}
	return json.Marshal(toSerialize)
}

type NullableAnimatedGif struct {
	value *AnimatedGif
	isSet bool
}

func (v NullableAnimatedGif) Get() *AnimatedGif {
	return v.value
}

func (v *NullableAnimatedGif) Set(val *AnimatedGif) {
	v.value = val
	v.isSet = true
}

func (v NullableAnimatedGif) IsSet() bool {
	return v.isSet
}

func (v *NullableAnimatedGif) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnimatedGif(val *AnimatedGif) *NullableAnimatedGif {
	return &NullableAnimatedGif{value: val, isSet: true}
}

func (v NullableAnimatedGif) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnimatedGif) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


