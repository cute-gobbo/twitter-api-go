/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// InvalidRequestProblem A problem that indicates this request is invalid.
type InvalidRequestProblem struct {
	Type *string `json:"type,omitempty"`
	Errors []map[string]interface{} `json:"errors,omitempty"`
	Title string `json:"title"`
	Detail string `json:"detail"`
}

// NewInvalidRequestProblem instantiates a new InvalidRequestProblem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvalidRequestProblem(type_ string, title string, detail string) *InvalidRequestProblem {
	this := InvalidRequestProblem{}
	this.Type = &type_
	this.Title = title
	this.Detail = detail
	return &this
}

// NewInvalidRequestProblemWithDefaults instantiates a new InvalidRequestProblem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvalidRequestProblemWithDefaults() *InvalidRequestProblem {
	this := InvalidRequestProblem{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InvalidRequestProblem) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvalidRequestProblem) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InvalidRequestProblem) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InvalidRequestProblem) SetType(v string) {
	o.Type = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *InvalidRequestProblem) GetErrors() []map[string]interface{} {
	if o == nil || o.Errors == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvalidRequestProblem) GetErrorsOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *InvalidRequestProblem) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []map[string]interface{} and assigns it to the Errors field.
func (o *InvalidRequestProblem) SetErrors(v []map[string]interface{}) {
	o.Errors = v
}

// GetTitle returns the Title field value
func (o *InvalidRequestProblem) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *InvalidRequestProblem) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *InvalidRequestProblem) SetTitle(v string) {
	o.Title = v
}

// GetDetail returns the Detail field value
func (o *InvalidRequestProblem) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *InvalidRequestProblem) GetDetailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *InvalidRequestProblem) SetDetail(v string) {
	o.Detail = v
}

func (o InvalidRequestProblem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["detail"] = o.Detail
	}
	return json.Marshal(toSerialize)
}

type NullableInvalidRequestProblem struct {
	value *InvalidRequestProblem
	isSet bool
}

func (v NullableInvalidRequestProblem) Get() *InvalidRequestProblem {
	return v.value
}

func (v *NullableInvalidRequestProblem) Set(val *InvalidRequestProblem) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidRequestProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidRequestProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidRequestProblem(val *InvalidRequestProblem) *NullableInvalidRequestProblem {
	return &NullableInvalidRequestProblem{value: val, isSet: true}
}

func (v NullableInvalidRequestProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidRequestProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


