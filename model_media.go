/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
	"fmt"
)

// Media - struct for Media
type Media struct {
	AnimatedGif *AnimatedGif
	Photo *Photo
	Video *Video
}

// AnimatedGifAsMedia is a convenience function that returns AnimatedGif wrapped in Media
func AnimatedGifAsMedia(v *AnimatedGif) Media {
	return Media{
		AnimatedGif: v,
	}
}

// PhotoAsMedia is a convenience function that returns Photo wrapped in Media
func PhotoAsMedia(v *Photo) Media {
	return Media{
		Photo: v,
	}
}

// VideoAsMedia is a convenience function that returns Video wrapped in Media
func VideoAsMedia(v *Video) Media {
	return Media{
		Video: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Media) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AnimatedGif
	err = newStrictDecoder(data).Decode(&dst.AnimatedGif)
	if err == nil {
		jsonAnimatedGif, _ := json.Marshal(dst.AnimatedGif)
		if string(jsonAnimatedGif) == "{}" { // empty struct
			dst.AnimatedGif = nil
		} else {
			match++
		}
	} else {
		dst.AnimatedGif = nil
	}

	// try to unmarshal data into Photo
	err = newStrictDecoder(data).Decode(&dst.Photo)
	if err == nil {
		jsonPhoto, _ := json.Marshal(dst.Photo)
		if string(jsonPhoto) == "{}" { // empty struct
			dst.Photo = nil
		} else {
			match++
		}
	} else {
		dst.Photo = nil
	}

	// try to unmarshal data into Video
	err = newStrictDecoder(data).Decode(&dst.Video)
	if err == nil {
		jsonVideo, _ := json.Marshal(dst.Video)
		if string(jsonVideo) == "{}" { // empty struct
			dst.Video = nil
		} else {
			match++
		}
	} else {
		dst.Video = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AnimatedGif = nil
		dst.Photo = nil
		dst.Video = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Media)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Media)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Media) MarshalJSON() ([]byte, error) {
	if src.AnimatedGif != nil {
		return json.Marshal(&src.AnimatedGif)
	}

	if src.Photo != nil {
		return json.Marshal(&src.Photo)
	}

	if src.Video != nil {
		return json.Marshal(&src.Video)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Media) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AnimatedGif != nil {
		return obj.AnimatedGif
	}

	if obj.Photo != nil {
		return obj.Photo
	}

	if obj.Video != nil {
		return obj.Video
	}

	// all schemas are nil
	return nil
}

type NullableMedia struct {
	value *Media
	isSet bool
}

func (v NullableMedia) Get() *Media {
	return v.value
}

func (v *NullableMedia) Set(val *Media) {
	v.value = val
	v.isSet = true
}

func (v NullableMedia) IsSet() bool {
	return v.isSet
}

func (v *NullableMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedia(val *Media) *NullableMedia {
	return &NullableMedia{value: val, isSet: true}
}

func (v NullableMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


