/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// Geo struct for Geo
type Geo struct {
	Type string `json:"type"`
	Bbox []float64 `json:"bbox"`
	Geometry *Point `json:"geometry,omitempty"`
	Properties map[string]interface{} `json:"properties"`
}

// NewGeo instantiates a new Geo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeo(type_ string, bbox []float64, properties map[string]interface{}) *Geo {
	this := Geo{}
	this.Type = type_
	this.Bbox = bbox
	this.Properties = properties
	return &this
}

// NewGeoWithDefaults instantiates a new Geo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoWithDefaults() *Geo {
	this := Geo{}
	return &this
}

// GetType returns the Type field value
func (o *Geo) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Geo) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Geo) SetType(v string) {
	o.Type = v
}

// GetBbox returns the Bbox field value
func (o *Geo) GetBbox() []float64 {
	if o == nil {
		var ret []float64
		return ret
	}

	return o.Bbox
}

// GetBboxOk returns a tuple with the Bbox field value
// and a boolean to check if the value has been set.
func (o *Geo) GetBboxOk() ([]float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Bbox, true
}

// SetBbox sets field value
func (o *Geo) SetBbox(v []float64) {
	o.Bbox = v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise.
func (o *Geo) GetGeometry() Point {
	if o == nil || o.Geometry == nil {
		var ret Point
		return ret
	}
	return *o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Geo) GetGeometryOk() (*Point, bool) {
	if o == nil || o.Geometry == nil {
		return nil, false
	}
	return o.Geometry, true
}

// HasGeometry returns a boolean if a field has been set.
func (o *Geo) HasGeometry() bool {
	if o != nil && o.Geometry != nil {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given Point and assigns it to the Geometry field.
func (o *Geo) SetGeometry(v Point) {
	o.Geometry = &v
}

// GetProperties returns the Properties field value
func (o *Geo) GetProperties() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *Geo) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *Geo) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

func (o Geo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["bbox"] = o.Bbox
	}
	if o.Geometry != nil {
		toSerialize["geometry"] = o.Geometry
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableGeo struct {
	value *Geo
	isSet bool
}

func (v NullableGeo) Get() *Geo {
	return v.value
}

func (v *NullableGeo) Set(val *Geo) {
	v.value = val
	v.isSet = true
}

func (v NullableGeo) IsSet() bool {
	return v.isSet
}

func (v *NullableGeo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeo(val *Geo) *NullableGeo {
	return &NullableGeo{value: val, isSet: true}
}

func (v NullableGeo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


