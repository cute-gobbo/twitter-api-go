/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// UserWithheld Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).
type UserWithheld struct {
	// Provides a list of countries where this content is not available.
	CountryCodes []string `json:"country_codes"`
	// Indicates that the content being withheld is a `user`.
	Scope *string `json:"scope,omitempty"`
}

// NewUserWithheld instantiates a new UserWithheld object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserWithheld(countryCodes []string) *UserWithheld {
	this := UserWithheld{}
	this.CountryCodes = countryCodes
	return &this
}

// NewUserWithheldWithDefaults instantiates a new UserWithheld object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithheldWithDefaults() *UserWithheld {
	this := UserWithheld{}
	return &this
}

// GetCountryCodes returns the CountryCodes field value
func (o *UserWithheld) GetCountryCodes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CountryCodes
}

// GetCountryCodesOk returns a tuple with the CountryCodes field value
// and a boolean to check if the value has been set.
func (o *UserWithheld) GetCountryCodesOk() ([]string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CountryCodes, true
}

// SetCountryCodes sets field value
func (o *UserWithheld) SetCountryCodes(v []string) {
	o.CountryCodes = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *UserWithheld) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserWithheld) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *UserWithheld) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *UserWithheld) SetScope(v string) {
	o.Scope = &v
}

func (o UserWithheld) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["country_codes"] = o.CountryCodes
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	return json.Marshal(toSerialize)
}

type NullableUserWithheld struct {
	value *UserWithheld
	isSet bool
}

func (v NullableUserWithheld) Get() *UserWithheld {
	return v.value
}

func (v *NullableUserWithheld) Set(val *UserWithheld) {
	v.value = val
	v.isSet = true
}

func (v NullableUserWithheld) IsSet() bool {
	return v.isSet
}

func (v *NullableUserWithheld) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserWithheld(val *UserWithheld) *NullableUserWithheld {
	return &NullableUserWithheld{value: val, isSet: true}
}

func (v NullableUserWithheld) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserWithheld) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


