/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// URLFields Represent the portion of text recognized as a URL.
type URLFields struct {
	// A validly formatted URL.
	Url string `json:"url"`
	// A validly formatted URL.
	ExpandedUrl *string `json:"expanded_url,omitempty"`
	// The URL as displayed in the Twitter client.
	DisplayUrl *string `json:"display_url,omitempty"`
	// Fully resolved url
	UnwoundUrl *string `json:"unwound_url,omitempty"`
	// HTTP Status Code.
	Status *int32 `json:"status,omitempty"`
	// Title of the page the URL points to.
	Title *string `json:"title,omitempty"`
	// Description of the URL landing page.
	Description *string `json:"description,omitempty"`
	Images []URLImage `json:"images,omitempty"`
}

// NewURLFields instantiates a new URLFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewURLFields(url string) *URLFields {
	this := URLFields{}
	this.Url = url
	return &this
}

// NewURLFieldsWithDefaults instantiates a new URLFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewURLFieldsWithDefaults() *URLFields {
	this := URLFields{}
	return &this
}

// GetUrl returns the Url field value
func (o *URLFields) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *URLFields) GetUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *URLFields) SetUrl(v string) {
	o.Url = v
}

// GetExpandedUrl returns the ExpandedUrl field value if set, zero value otherwise.
func (o *URLFields) GetExpandedUrl() string {
	if o == nil || o.ExpandedUrl == nil {
		var ret string
		return ret
	}
	return *o.ExpandedUrl
}

// GetExpandedUrlOk returns a tuple with the ExpandedUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLFields) GetExpandedUrlOk() (*string, bool) {
	if o == nil || o.ExpandedUrl == nil {
		return nil, false
	}
	return o.ExpandedUrl, true
}

// HasExpandedUrl returns a boolean if a field has been set.
func (o *URLFields) HasExpandedUrl() bool {
	if o != nil && o.ExpandedUrl != nil {
		return true
	}

	return false
}

// SetExpandedUrl gets a reference to the given string and assigns it to the ExpandedUrl field.
func (o *URLFields) SetExpandedUrl(v string) {
	o.ExpandedUrl = &v
}

// GetDisplayUrl returns the DisplayUrl field value if set, zero value otherwise.
func (o *URLFields) GetDisplayUrl() string {
	if o == nil || o.DisplayUrl == nil {
		var ret string
		return ret
	}
	return *o.DisplayUrl
}

// GetDisplayUrlOk returns a tuple with the DisplayUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLFields) GetDisplayUrlOk() (*string, bool) {
	if o == nil || o.DisplayUrl == nil {
		return nil, false
	}
	return o.DisplayUrl, true
}

// HasDisplayUrl returns a boolean if a field has been set.
func (o *URLFields) HasDisplayUrl() bool {
	if o != nil && o.DisplayUrl != nil {
		return true
	}

	return false
}

// SetDisplayUrl gets a reference to the given string and assigns it to the DisplayUrl field.
func (o *URLFields) SetDisplayUrl(v string) {
	o.DisplayUrl = &v
}

// GetUnwoundUrl returns the UnwoundUrl field value if set, zero value otherwise.
func (o *URLFields) GetUnwoundUrl() string {
	if o == nil || o.UnwoundUrl == nil {
		var ret string
		return ret
	}
	return *o.UnwoundUrl
}

// GetUnwoundUrlOk returns a tuple with the UnwoundUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLFields) GetUnwoundUrlOk() (*string, bool) {
	if o == nil || o.UnwoundUrl == nil {
		return nil, false
	}
	return o.UnwoundUrl, true
}

// HasUnwoundUrl returns a boolean if a field has been set.
func (o *URLFields) HasUnwoundUrl() bool {
	if o != nil && o.UnwoundUrl != nil {
		return true
	}

	return false
}

// SetUnwoundUrl gets a reference to the given string and assigns it to the UnwoundUrl field.
func (o *URLFields) SetUnwoundUrl(v string) {
	o.UnwoundUrl = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *URLFields) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLFields) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *URLFields) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *URLFields) SetStatus(v int32) {
	o.Status = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *URLFields) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLFields) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *URLFields) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *URLFields) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *URLFields) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLFields) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *URLFields) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *URLFields) SetDescription(v string) {
	o.Description = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *URLFields) GetImages() []URLImage {
	if o == nil || o.Images == nil {
		var ret []URLImage
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLFields) GetImagesOk() ([]URLImage, bool) {
	if o == nil || o.Images == nil {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *URLFields) HasImages() bool {
	if o != nil && o.Images != nil {
		return true
	}

	return false
}

// SetImages gets a reference to the given []URLImage and assigns it to the Images field.
func (o *URLFields) SetImages(v []URLImage) {
	o.Images = v
}

func (o URLFields) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if o.ExpandedUrl != nil {
		toSerialize["expanded_url"] = o.ExpandedUrl
	}
	if o.DisplayUrl != nil {
		toSerialize["display_url"] = o.DisplayUrl
	}
	if o.UnwoundUrl != nil {
		toSerialize["unwound_url"] = o.UnwoundUrl
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	return json.Marshal(toSerialize)
}

type NullableURLFields struct {
	value *URLFields
	isSet bool
}

func (v NullableURLFields) Get() *URLFields {
	return v.value
}

func (v *NullableURLFields) Set(val *URLFields) {
	v.value = val
	v.isSet = true
}

func (v NullableURLFields) IsSet() bool {
	return v.isSet
}

func (v *NullableURLFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableURLFields(val *URLFields) *NullableURLFields {
	return &NullableURLFields{value: val, isSet: true}
}

func (v NullableURLFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableURLFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


