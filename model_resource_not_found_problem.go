/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// ResourceNotFoundProblem A problem that indicates that a given Tweet, User, etc. does not exist.
type ResourceNotFoundProblem struct {
	Type *string `json:"type,omitempty"`
	Parameter string `json:"parameter"`
	// Value will match the schema of the field.
	Value interface{} `json:"value"`
	ResourceId string `json:"resource_id"`
	ResourceType string `json:"resource_type"`
	Title string `json:"title"`
	Detail string `json:"detail"`
}

// NewResourceNotFoundProblem instantiates a new ResourceNotFoundProblem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceNotFoundProblem(parameter string, value interface{}, resourceId string, resourceType string, type_ string, title string, detail string) *ResourceNotFoundProblem {
	this := ResourceNotFoundProblem{}
	this.Type = &type_
	this.Title = title
	this.Detail = detail
	return &this
}

// NewResourceNotFoundProblemWithDefaults instantiates a new ResourceNotFoundProblem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceNotFoundProblemWithDefaults() *ResourceNotFoundProblem {
	this := ResourceNotFoundProblem{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResourceNotFoundProblem) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceNotFoundProblem) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResourceNotFoundProblem) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResourceNotFoundProblem) SetType(v string) {
	o.Type = &v
}

// GetParameter returns the Parameter field value
func (o *ResourceNotFoundProblem) GetParameter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value
// and a boolean to check if the value has been set.
func (o *ResourceNotFoundProblem) GetParameterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Parameter, true
}

// SetParameter sets field value
func (o *ResourceNotFoundProblem) SetParameter(v string) {
	o.Parameter = v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ResourceNotFoundProblem) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceNotFoundProblem) GetValueOk() (*interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ResourceNotFoundProblem) SetValue(v interface{}) {
	o.Value = v
}

// GetResourceId returns the ResourceId field value
func (o *ResourceNotFoundProblem) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceNotFoundProblem) GetResourceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ResourceNotFoundProblem) SetResourceId(v string) {
	o.ResourceId = v
}

// GetResourceType returns the ResourceType field value
func (o *ResourceNotFoundProblem) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ResourceNotFoundProblem) GetResourceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ResourceNotFoundProblem) SetResourceType(v string) {
	o.ResourceType = v
}

// GetTitle returns the Title field value
func (o *ResourceNotFoundProblem) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ResourceNotFoundProblem) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ResourceNotFoundProblem) SetTitle(v string) {
	o.Title = v
}

// GetDetail returns the Detail field value
func (o *ResourceNotFoundProblem) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *ResourceNotFoundProblem) GetDetailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *ResourceNotFoundProblem) SetDetail(v string) {
	o.Detail = v
}

func (o ResourceNotFoundProblem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["parameter"] = o.Parameter
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["resource_id"] = o.ResourceId
	}
	if true {
		toSerialize["resource_type"] = o.ResourceType
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["detail"] = o.Detail
	}
	return json.Marshal(toSerialize)
}

type NullableResourceNotFoundProblem struct {
	value *ResourceNotFoundProblem
	isSet bool
}

func (v NullableResourceNotFoundProblem) Get() *ResourceNotFoundProblem {
	return v.value
}

func (v *NullableResourceNotFoundProblem) Set(val *ResourceNotFoundProblem) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceNotFoundProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceNotFoundProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceNotFoundProblem(val *ResourceNotFoundProblem) *NullableResourceNotFoundProblem {
	return &NullableResourceNotFoundProblem{value: val, isSet: true}
}

func (v NullableResourceNotFoundProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceNotFoundProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


