/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// ContextAnnotation Annotation inferred from the tweet text.
type ContextAnnotation struct {
	Domain ContextAnnotationDomainFields `json:"domain"`
	Entity ContextAnnotationEntityFields `json:"entity"`
}

// NewContextAnnotation instantiates a new ContextAnnotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextAnnotation(domain ContextAnnotationDomainFields, entity ContextAnnotationEntityFields) *ContextAnnotation {
	this := ContextAnnotation{}
	this.Domain = domain
	this.Entity = entity
	return &this
}

// NewContextAnnotationWithDefaults instantiates a new ContextAnnotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextAnnotationWithDefaults() *ContextAnnotation {
	this := ContextAnnotation{}
	return &this
}

// GetDomain returns the Domain field value
func (o *ContextAnnotation) GetDomain() ContextAnnotationDomainFields {
	if o == nil {
		var ret ContextAnnotationDomainFields
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ContextAnnotation) GetDomainOk() (*ContextAnnotationDomainFields, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ContextAnnotation) SetDomain(v ContextAnnotationDomainFields) {
	o.Domain = v
}

// GetEntity returns the Entity field value
func (o *ContextAnnotation) GetEntity() ContextAnnotationEntityFields {
	if o == nil {
		var ret ContextAnnotationEntityFields
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *ContextAnnotation) GetEntityOk() (*ContextAnnotationEntityFields, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *ContextAnnotation) SetEntity(v ContextAnnotationEntityFields) {
	o.Entity = v
}

func (o ContextAnnotation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["domain"] = o.Domain
	}
	if true {
		toSerialize["entity"] = o.Entity
	}
	return json.Marshal(toSerialize)
}

type NullableContextAnnotation struct {
	value *ContextAnnotation
	isSet bool
}

func (v NullableContextAnnotation) Get() *ContextAnnotation {
	return v.value
}

func (v *NullableContextAnnotation) Set(val *ContextAnnotation) {
	v.value = val
	v.isSet = true
}

func (v NullableContextAnnotation) IsSet() bool {
	return v.isSet
}

func (v *NullableContextAnnotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextAnnotation(val *ContextAnnotation) *NullableContextAnnotation {
	return &NullableContextAnnotation{value: val, isSet: true}
}

func (v NullableContextAnnotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextAnnotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


