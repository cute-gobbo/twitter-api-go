/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// GenericProblem A generic problem with no additional information beyond that provided by the HTTP status code.
type GenericProblem struct {
	Type *string `json:"type,omitempty"`
	Status int32 `json:"status"`
	Title string `json:"title"`
	Detail string `json:"detail"`
}

// NewGenericProblem instantiates a new GenericProblem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericProblem(status int32, type_ string, title string, detail string) *GenericProblem {
	this := GenericProblem{}
	this.Type = &type_
	this.Title = title
	this.Detail = detail
	return &this
}

// NewGenericProblemWithDefaults instantiates a new GenericProblem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericProblemWithDefaults() *GenericProblem {
	this := GenericProblem{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GenericProblem) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericProblem) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GenericProblem) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GenericProblem) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value
func (o *GenericProblem) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GenericProblem) GetStatusOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GenericProblem) SetStatus(v int32) {
	o.Status = v
}

// GetTitle returns the Title field value
func (o *GenericProblem) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *GenericProblem) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *GenericProblem) SetTitle(v string) {
	o.Title = v
}

// GetDetail returns the Detail field value
func (o *GenericProblem) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *GenericProblem) GetDetailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *GenericProblem) SetDetail(v string) {
	o.Detail = v
}

func (o GenericProblem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["detail"] = o.Detail
	}
	return json.Marshal(toSerialize)
}

type NullableGenericProblem struct {
	value *GenericProblem
	isSet bool
}

func (v NullableGenericProblem) Get() *GenericProblem {
	return v.value
}

func (v *NullableGenericProblem) Set(val *GenericProblem) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericProblem(val *GenericProblem) *NullableGenericProblem {
	return &NullableGenericProblem{value: val, isSet: true}
}

func (v NullableGenericProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


