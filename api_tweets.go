/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

// TweetsApiService TweetsApi service
type TweetsApiService service

type ApiFindTweetByIdRequest struct {
	ctx context.Context
	ApiService *TweetsApiService
	id string
	expansions *[]string
	tweetFields *[]string
	userFields *[]string
	mediaFields *[]string
	placeFields *[]string
	pollFields *[]string
}

// A comma separated list of fields to expand.
func (r ApiFindTweetByIdRequest) Expansions(expansions []string) ApiFindTweetByIdRequest {
	r.expansions = &expansions
	return r
}
// A comma separated list of Tweet fields to display.
func (r ApiFindTweetByIdRequest) TweetFields(tweetFields []string) ApiFindTweetByIdRequest {
	r.tweetFields = &tweetFields
	return r
}
// A comma separated list of User fields to display.
func (r ApiFindTweetByIdRequest) UserFields(userFields []string) ApiFindTweetByIdRequest {
	r.userFields = &userFields
	return r
}
// A comma separated list of Media fields to display.
func (r ApiFindTweetByIdRequest) MediaFields(mediaFields []string) ApiFindTweetByIdRequest {
	r.mediaFields = &mediaFields
	return r
}
// A comma separated list of Place fields to display.
func (r ApiFindTweetByIdRequest) PlaceFields(placeFields []string) ApiFindTweetByIdRequest {
	r.placeFields = &placeFields
	return r
}
// A comma separated list of Poll fields to display.
func (r ApiFindTweetByIdRequest) PollFields(pollFields []string) ApiFindTweetByIdRequest {
	r.pollFields = &pollFields
	return r
}

func (r ApiFindTweetByIdRequest) Execute() (*SingleTweetLookupResponse, *http.Response, error) {
	return r.ApiService.FindTweetByIdExecute(r)
}

/*
FindTweetById Returns hydrated Tweet objects

Returns a variety of information about the Tweet specified by the requested ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A single Tweet ID.
 @return ApiFindTweetByIdRequest
*/
func (a *TweetsApiService) FindTweetById(ctx context.Context, id string) ApiFindTweetByIdRequest {
	return ApiFindTweetByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SingleTweetLookupResponse
func (a *TweetsApiService) FindTweetByIdExecute(r ApiFindTweetByIdRequest) (*SingleTweetLookupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SingleTweetLookupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TweetsApiService.FindTweetById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/labs/2/tweets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.expansions != nil {
		localVarQueryParams.Add("expansions", parameterToString(*r.expansions, "csv"))
	}
	if r.tweetFields != nil {
		localVarQueryParams.Add("tweet.fields", parameterToString(*r.tweetFields, "csv"))
	}
	if r.userFields != nil {
		localVarQueryParams.Add("user.fields", parameterToString(*r.userFields, "csv"))
	}
	if r.mediaFields != nil {
		localVarQueryParams.Add("media.fields", parameterToString(*r.mediaFields, "csv"))
	}
	if r.placeFields != nil {
		localVarQueryParams.Add("place.fields", parameterToString(*r.placeFields, "csv"))
	}
	if r.pollFields != nil {
		localVarQueryParams.Add("poll.fields", parameterToString(*r.pollFields, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindTweetsByIdRequest struct {
	ctx context.Context
	ApiService *TweetsApiService
	ids *[]string
	expansions *[]string
	tweetFields *[]string
	userFields *[]string
	mediaFields *[]string
	placeFields *[]string
	pollFields *[]string
}

// A comma separated list of Tweet IDs. Up to 100 are allowed in a single request.
func (r ApiFindTweetsByIdRequest) Ids(ids []string) ApiFindTweetsByIdRequest {
	r.ids = &ids
	return r
}
// A comma separated list of fields to expand.
func (r ApiFindTweetsByIdRequest) Expansions(expansions []string) ApiFindTweetsByIdRequest {
	r.expansions = &expansions
	return r
}
// A comma separated list of Tweet fields to display.
func (r ApiFindTweetsByIdRequest) TweetFields(tweetFields []string) ApiFindTweetsByIdRequest {
	r.tweetFields = &tweetFields
	return r
}
// A comma separated list of User fields to display.
func (r ApiFindTweetsByIdRequest) UserFields(userFields []string) ApiFindTweetsByIdRequest {
	r.userFields = &userFields
	return r
}
// A comma separated list of Media fields to display.
func (r ApiFindTweetsByIdRequest) MediaFields(mediaFields []string) ApiFindTweetsByIdRequest {
	r.mediaFields = &mediaFields
	return r
}
// A comma separated list of Place fields to display.
func (r ApiFindTweetsByIdRequest) PlaceFields(placeFields []string) ApiFindTweetsByIdRequest {
	r.placeFields = &placeFields
	return r
}
// A comma separated list of Poll fields to display.
func (r ApiFindTweetsByIdRequest) PollFields(pollFields []string) ApiFindTweetsByIdRequest {
	r.pollFields = &pollFields
	return r
}

func (r ApiFindTweetsByIdRequest) Execute() (*TweetLookupResponse, *http.Response, error) {
	return r.ApiService.FindTweetsByIdExecute(r)
}

/*
FindTweetsById Returns hydrated Tweet objects

Returns a variety of information about the Tweet specified by the requested ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFindTweetsByIdRequest
*/
func (a *TweetsApiService) FindTweetsById(ctx context.Context) ApiFindTweetsByIdRequest {
	return ApiFindTweetsByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TweetLookupResponse
func (a *TweetsApiService) FindTweetsByIdExecute(r ApiFindTweetsByIdRequest) (*TweetLookupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TweetLookupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TweetsApiService.FindTweetsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/labs/2/tweets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return localVarReturnValue, nil, reportError("ids is required and must be specified")
	}
	if len(*r.ids) < 1 {
		return localVarReturnValue, nil, reportError("ids must have at least 1 elements")
	}
	if len(*r.ids) > 100 {
		return localVarReturnValue, nil, reportError("ids must have less than 100 elements")
	}

	localVarQueryParams.Add("ids", parameterToString(*r.ids, "csv"))
	if r.expansions != nil {
		localVarQueryParams.Add("expansions", parameterToString(*r.expansions, "csv"))
	}
	if r.tweetFields != nil {
		localVarQueryParams.Add("tweet.fields", parameterToString(*r.tweetFields, "csv"))
	}
	if r.userFields != nil {
		localVarQueryParams.Add("user.fields", parameterToString(*r.userFields, "csv"))
	}
	if r.mediaFields != nil {
		localVarQueryParams.Add("media.fields", parameterToString(*r.mediaFields, "csv"))
	}
	if r.placeFields != nil {
		localVarQueryParams.Add("place.fields", parameterToString(*r.placeFields, "csv"))
	}
	if r.pollFields != nil {
		localVarQueryParams.Add("poll.fields", parameterToString(*r.pollFields, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
