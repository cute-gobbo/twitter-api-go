/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// DisallowedResourceProblem A problem that indicates that the resource requested violates the precepts of this API.
type DisallowedResourceProblem struct {
	Type *string `json:"type,omitempty"`
	ResourceId string `json:"resource_id"`
	ResourceType string `json:"resource_type"`
	Section string `json:"section"`
	Title string `json:"title"`
	Detail string `json:"detail"`
}

// NewDisallowedResourceProblem instantiates a new DisallowedResourceProblem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisallowedResourceProblem(resourceId string, resourceType string, section string, type_ string, title string, detail string) *DisallowedResourceProblem {
	this := DisallowedResourceProblem{}
	this.Type = &type_
	this.Title = title
	this.Detail = detail
	return &this
}

// NewDisallowedResourceProblemWithDefaults instantiates a new DisallowedResourceProblem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisallowedResourceProblemWithDefaults() *DisallowedResourceProblem {
	this := DisallowedResourceProblem{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DisallowedResourceProblem) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisallowedResourceProblem) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DisallowedResourceProblem) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DisallowedResourceProblem) SetType(v string) {
	o.Type = &v
}

// GetResourceId returns the ResourceId field value
func (o *DisallowedResourceProblem) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *DisallowedResourceProblem) GetResourceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *DisallowedResourceProblem) SetResourceId(v string) {
	o.ResourceId = v
}

// GetResourceType returns the ResourceType field value
func (o *DisallowedResourceProblem) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *DisallowedResourceProblem) GetResourceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *DisallowedResourceProblem) SetResourceType(v string) {
	o.ResourceType = v
}

// GetSection returns the Section field value
func (o *DisallowedResourceProblem) GetSection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Section
}

// GetSectionOk returns a tuple with the Section field value
// and a boolean to check if the value has been set.
func (o *DisallowedResourceProblem) GetSectionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Section, true
}

// SetSection sets field value
func (o *DisallowedResourceProblem) SetSection(v string) {
	o.Section = v
}

// GetTitle returns the Title field value
func (o *DisallowedResourceProblem) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *DisallowedResourceProblem) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *DisallowedResourceProblem) SetTitle(v string) {
	o.Title = v
}

// GetDetail returns the Detail field value
func (o *DisallowedResourceProblem) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *DisallowedResourceProblem) GetDetailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *DisallowedResourceProblem) SetDetail(v string) {
	o.Detail = v
}

func (o DisallowedResourceProblem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["resource_id"] = o.ResourceId
	}
	if true {
		toSerialize["resource_type"] = o.ResourceType
	}
	if true {
		toSerialize["section"] = o.Section
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["detail"] = o.Detail
	}
	return json.Marshal(toSerialize)
}

type NullableDisallowedResourceProblem struct {
	value *DisallowedResourceProblem
	isSet bool
}

func (v NullableDisallowedResourceProblem) Get() *DisallowedResourceProblem {
	return v.value
}

func (v *NullableDisallowedResourceProblem) Set(val *DisallowedResourceProblem) {
	v.value = val
	v.isSet = true
}

func (v NullableDisallowedResourceProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableDisallowedResourceProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisallowedResourceProblem(val *DisallowedResourceProblem) *NullableDisallowedResourceProblem {
	return &NullableDisallowedResourceProblem{value: val, isSet: true}
}

func (v NullableDisallowedResourceProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisallowedResourceProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


