/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// URLImage Represent the information for the URL image
type URLImage struct {
	// A validly formatted URL.
	Url *string `json:"url,omitempty"`
	// The height of the media in pixels
	Height *int32 `json:"height,omitempty"`
	// The width of the media in pixels
	Width *int32 `json:"width,omitempty"`
}

// NewURLImage instantiates a new URLImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewURLImage() *URLImage {
	this := URLImage{}
	return &this
}

// NewURLImageWithDefaults instantiates a new URLImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewURLImageWithDefaults() *URLImage {
	this := URLImage{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *URLImage) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLImage) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *URLImage) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *URLImage) SetUrl(v string) {
	o.Url = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *URLImage) GetHeight() int32 {
	if o == nil || o.Height == nil {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLImage) GetHeightOk() (*int32, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *URLImage) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *URLImage) SetHeight(v int32) {
	o.Height = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *URLImage) GetWidth() int32 {
	if o == nil || o.Width == nil {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLImage) GetWidthOk() (*int32, bool) {
	if o == nil || o.Width == nil {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *URLImage) HasWidth() bool {
	if o != nil && o.Width != nil {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *URLImage) SetWidth(v int32) {
	o.Width = &v
}

func (o URLImage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	if o.Width != nil {
		toSerialize["width"] = o.Width
	}
	return json.Marshal(toSerialize)
}

type NullableURLImage struct {
	value *URLImage
	isSet bool
}

func (v NullableURLImage) Get() *URLImage {
	return v.value
}

func (v *NullableURLImage) Set(val *URLImage) {
	v.value = val
	v.isSet = true
}

func (v NullableURLImage) IsSet() bool {
	return v.isSet
}

func (v *NullableURLImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableURLImage(val *URLImage) *NullableURLImage {
	return &NullableURLImage{value: val, isSet: true}
}

func (v NullableURLImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableURLImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


