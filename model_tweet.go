/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
	"time"
)

// Tweet struct for Tweet
type Tweet struct {
	// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	Id string `json:"id"`
	// Creation time of the Tweet.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The content of the Tweet.
	Text string `json:"text"`
	// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	AuthorId *string `json:"author_id,omitempty"`
	// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	InReplyToUserId *string `json:"in_reply_to_user_id,omitempty"`
	// A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.
	ReferencedTweets []TweetReferencedTweets `json:"referenced_tweets,omitempty"`
	Attachments *TweetAttachments `json:"attachments,omitempty"`
	ContextAnnotations []ContextAnnotation `json:"context_annotations,omitempty"`
	Withheld *TweetWithheld `json:"withheld,omitempty"`
	Geo *TweetGeo `json:"geo,omitempty"`
	Entities *FullTextEntities `json:"entities,omitempty"`
	PublicMetrics *TweetPublicMetrics `json:"public_metrics,omitempty"`
	// Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.
	PossiblySensitive *bool `json:"possibly_sensitive,omitempty"`
	// Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag.
	Lang *string `json:"lang,omitempty"`
	// The name of the app the user Tweeted from.
	Source *string `json:"source,omitempty"`
	NonPublicMetrics *TweetNonPublicMetrics `json:"non_public_metrics,omitempty"`
	PromotedMetrics *TweetPromotedMetrics `json:"promoted_metrics,omitempty"`
	OrganicMetrics *TweetOrganicMetrics `json:"organic_metrics,omitempty"`
}

// NewTweet instantiates a new Tweet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTweet(id string, text string) *Tweet {
	this := Tweet{}
	this.Id = id
	this.Text = text
	return &this
}

// NewTweetWithDefaults instantiates a new Tweet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTweetWithDefaults() *Tweet {
	this := Tweet{}
	return &this
}

// GetId returns the Id field value
func (o *Tweet) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Tweet) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Tweet) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Tweet) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Tweet) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Tweet) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetText returns the Text field value
func (o *Tweet) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *Tweet) GetTextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *Tweet) SetText(v string) {
	o.Text = v
}

// GetAuthorId returns the AuthorId field value if set, zero value otherwise.
func (o *Tweet) GetAuthorId() string {
	if o == nil || o.AuthorId == nil {
		var ret string
		return ret
	}
	return *o.AuthorId
}

// GetAuthorIdOk returns a tuple with the AuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetAuthorIdOk() (*string, bool) {
	if o == nil || o.AuthorId == nil {
		return nil, false
	}
	return o.AuthorId, true
}

// HasAuthorId returns a boolean if a field has been set.
func (o *Tweet) HasAuthorId() bool {
	if o != nil && o.AuthorId != nil {
		return true
	}

	return false
}

// SetAuthorId gets a reference to the given string and assigns it to the AuthorId field.
func (o *Tweet) SetAuthorId(v string) {
	o.AuthorId = &v
}

// GetInReplyToUserId returns the InReplyToUserId field value if set, zero value otherwise.
func (o *Tweet) GetInReplyToUserId() string {
	if o == nil || o.InReplyToUserId == nil {
		var ret string
		return ret
	}
	return *o.InReplyToUserId
}

// GetInReplyToUserIdOk returns a tuple with the InReplyToUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetInReplyToUserIdOk() (*string, bool) {
	if o == nil || o.InReplyToUserId == nil {
		return nil, false
	}
	return o.InReplyToUserId, true
}

// HasInReplyToUserId returns a boolean if a field has been set.
func (o *Tweet) HasInReplyToUserId() bool {
	if o != nil && o.InReplyToUserId != nil {
		return true
	}

	return false
}

// SetInReplyToUserId gets a reference to the given string and assigns it to the InReplyToUserId field.
func (o *Tweet) SetInReplyToUserId(v string) {
	o.InReplyToUserId = &v
}

// GetReferencedTweets returns the ReferencedTweets field value if set, zero value otherwise.
func (o *Tweet) GetReferencedTweets() []TweetReferencedTweets {
	if o == nil || o.ReferencedTweets == nil {
		var ret []TweetReferencedTweets
		return ret
	}
	return o.ReferencedTweets
}

// GetReferencedTweetsOk returns a tuple with the ReferencedTweets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetReferencedTweetsOk() ([]TweetReferencedTweets, bool) {
	if o == nil || o.ReferencedTweets == nil {
		return nil, false
	}
	return o.ReferencedTweets, true
}

// HasReferencedTweets returns a boolean if a field has been set.
func (o *Tweet) HasReferencedTweets() bool {
	if o != nil && o.ReferencedTweets != nil {
		return true
	}

	return false
}

// SetReferencedTweets gets a reference to the given []TweetReferencedTweets and assigns it to the ReferencedTweets field.
func (o *Tweet) SetReferencedTweets(v []TweetReferencedTweets) {
	o.ReferencedTweets = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *Tweet) GetAttachments() TweetAttachments {
	if o == nil || o.Attachments == nil {
		var ret TweetAttachments
		return ret
	}
	return *o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetAttachmentsOk() (*TweetAttachments, bool) {
	if o == nil || o.Attachments == nil {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *Tweet) HasAttachments() bool {
	if o != nil && o.Attachments != nil {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given TweetAttachments and assigns it to the Attachments field.
func (o *Tweet) SetAttachments(v TweetAttachments) {
	o.Attachments = &v
}

// GetContextAnnotations returns the ContextAnnotations field value if set, zero value otherwise.
func (o *Tweet) GetContextAnnotations() []ContextAnnotation {
	if o == nil || o.ContextAnnotations == nil {
		var ret []ContextAnnotation
		return ret
	}
	return o.ContextAnnotations
}

// GetContextAnnotationsOk returns a tuple with the ContextAnnotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetContextAnnotationsOk() ([]ContextAnnotation, bool) {
	if o == nil || o.ContextAnnotations == nil {
		return nil, false
	}
	return o.ContextAnnotations, true
}

// HasContextAnnotations returns a boolean if a field has been set.
func (o *Tweet) HasContextAnnotations() bool {
	if o != nil && o.ContextAnnotations != nil {
		return true
	}

	return false
}

// SetContextAnnotations gets a reference to the given []ContextAnnotation and assigns it to the ContextAnnotations field.
func (o *Tweet) SetContextAnnotations(v []ContextAnnotation) {
	o.ContextAnnotations = v
}

// GetWithheld returns the Withheld field value if set, zero value otherwise.
func (o *Tweet) GetWithheld() TweetWithheld {
	if o == nil || o.Withheld == nil {
		var ret TweetWithheld
		return ret
	}
	return *o.Withheld
}

// GetWithheldOk returns a tuple with the Withheld field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetWithheldOk() (*TweetWithheld, bool) {
	if o == nil || o.Withheld == nil {
		return nil, false
	}
	return o.Withheld, true
}

// HasWithheld returns a boolean if a field has been set.
func (o *Tweet) HasWithheld() bool {
	if o != nil && o.Withheld != nil {
		return true
	}

	return false
}

// SetWithheld gets a reference to the given TweetWithheld and assigns it to the Withheld field.
func (o *Tweet) SetWithheld(v TweetWithheld) {
	o.Withheld = &v
}

// GetGeo returns the Geo field value if set, zero value otherwise.
func (o *Tweet) GetGeo() TweetGeo {
	if o == nil || o.Geo == nil {
		var ret TweetGeo
		return ret
	}
	return *o.Geo
}

// GetGeoOk returns a tuple with the Geo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetGeoOk() (*TweetGeo, bool) {
	if o == nil || o.Geo == nil {
		return nil, false
	}
	return o.Geo, true
}

// HasGeo returns a boolean if a field has been set.
func (o *Tweet) HasGeo() bool {
	if o != nil && o.Geo != nil {
		return true
	}

	return false
}

// SetGeo gets a reference to the given TweetGeo and assigns it to the Geo field.
func (o *Tweet) SetGeo(v TweetGeo) {
	o.Geo = &v
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *Tweet) GetEntities() FullTextEntities {
	if o == nil || o.Entities == nil {
		var ret FullTextEntities
		return ret
	}
	return *o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetEntitiesOk() (*FullTextEntities, bool) {
	if o == nil || o.Entities == nil {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *Tweet) HasEntities() bool {
	if o != nil && o.Entities != nil {
		return true
	}

	return false
}

// SetEntities gets a reference to the given FullTextEntities and assigns it to the Entities field.
func (o *Tweet) SetEntities(v FullTextEntities) {
	o.Entities = &v
}

// GetPublicMetrics returns the PublicMetrics field value if set, zero value otherwise.
func (o *Tweet) GetPublicMetrics() TweetPublicMetrics {
	if o == nil || o.PublicMetrics == nil {
		var ret TweetPublicMetrics
		return ret
	}
	return *o.PublicMetrics
}

// GetPublicMetricsOk returns a tuple with the PublicMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetPublicMetricsOk() (*TweetPublicMetrics, bool) {
	if o == nil || o.PublicMetrics == nil {
		return nil, false
	}
	return o.PublicMetrics, true
}

// HasPublicMetrics returns a boolean if a field has been set.
func (o *Tweet) HasPublicMetrics() bool {
	if o != nil && o.PublicMetrics != nil {
		return true
	}

	return false
}

// SetPublicMetrics gets a reference to the given TweetPublicMetrics and assigns it to the PublicMetrics field.
func (o *Tweet) SetPublicMetrics(v TweetPublicMetrics) {
	o.PublicMetrics = &v
}

// GetPossiblySensitive returns the PossiblySensitive field value if set, zero value otherwise.
func (o *Tweet) GetPossiblySensitive() bool {
	if o == nil || o.PossiblySensitive == nil {
		var ret bool
		return ret
	}
	return *o.PossiblySensitive
}

// GetPossiblySensitiveOk returns a tuple with the PossiblySensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetPossiblySensitiveOk() (*bool, bool) {
	if o == nil || o.PossiblySensitive == nil {
		return nil, false
	}
	return o.PossiblySensitive, true
}

// HasPossiblySensitive returns a boolean if a field has been set.
func (o *Tweet) HasPossiblySensitive() bool {
	if o != nil && o.PossiblySensitive != nil {
		return true
	}

	return false
}

// SetPossiblySensitive gets a reference to the given bool and assigns it to the PossiblySensitive field.
func (o *Tweet) SetPossiblySensitive(v bool) {
	o.PossiblySensitive = &v
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *Tweet) GetLang() string {
	if o == nil || o.Lang == nil {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetLangOk() (*string, bool) {
	if o == nil || o.Lang == nil {
		return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *Tweet) HasLang() bool {
	if o != nil && o.Lang != nil {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *Tweet) SetLang(v string) {
	o.Lang = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Tweet) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Tweet) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Tweet) SetSource(v string) {
	o.Source = &v
}

// GetNonPublicMetrics returns the NonPublicMetrics field value if set, zero value otherwise.
func (o *Tweet) GetNonPublicMetrics() TweetNonPublicMetrics {
	if o == nil || o.NonPublicMetrics == nil {
		var ret TweetNonPublicMetrics
		return ret
	}
	return *o.NonPublicMetrics
}

// GetNonPublicMetricsOk returns a tuple with the NonPublicMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetNonPublicMetricsOk() (*TweetNonPublicMetrics, bool) {
	if o == nil || o.NonPublicMetrics == nil {
		return nil, false
	}
	return o.NonPublicMetrics, true
}

// HasNonPublicMetrics returns a boolean if a field has been set.
func (o *Tweet) HasNonPublicMetrics() bool {
	if o != nil && o.NonPublicMetrics != nil {
		return true
	}

	return false
}

// SetNonPublicMetrics gets a reference to the given TweetNonPublicMetrics and assigns it to the NonPublicMetrics field.
func (o *Tweet) SetNonPublicMetrics(v TweetNonPublicMetrics) {
	o.NonPublicMetrics = &v
}

// GetPromotedMetrics returns the PromotedMetrics field value if set, zero value otherwise.
func (o *Tweet) GetPromotedMetrics() TweetPromotedMetrics {
	if o == nil || o.PromotedMetrics == nil {
		var ret TweetPromotedMetrics
		return ret
	}
	return *o.PromotedMetrics
}

// GetPromotedMetricsOk returns a tuple with the PromotedMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetPromotedMetricsOk() (*TweetPromotedMetrics, bool) {
	if o == nil || o.PromotedMetrics == nil {
		return nil, false
	}
	return o.PromotedMetrics, true
}

// HasPromotedMetrics returns a boolean if a field has been set.
func (o *Tweet) HasPromotedMetrics() bool {
	if o != nil && o.PromotedMetrics != nil {
		return true
	}

	return false
}

// SetPromotedMetrics gets a reference to the given TweetPromotedMetrics and assigns it to the PromotedMetrics field.
func (o *Tweet) SetPromotedMetrics(v TweetPromotedMetrics) {
	o.PromotedMetrics = &v
}

// GetOrganicMetrics returns the OrganicMetrics field value if set, zero value otherwise.
func (o *Tweet) GetOrganicMetrics() TweetOrganicMetrics {
	if o == nil || o.OrganicMetrics == nil {
		var ret TweetOrganicMetrics
		return ret
	}
	return *o.OrganicMetrics
}

// GetOrganicMetricsOk returns a tuple with the OrganicMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetOrganicMetricsOk() (*TweetOrganicMetrics, bool) {
	if o == nil || o.OrganicMetrics == nil {
		return nil, false
	}
	return o.OrganicMetrics, true
}

// HasOrganicMetrics returns a boolean if a field has been set.
func (o *Tweet) HasOrganicMetrics() bool {
	if o != nil && o.OrganicMetrics != nil {
		return true
	}

	return false
}

// SetOrganicMetrics gets a reference to the given TweetOrganicMetrics and assigns it to the OrganicMetrics field.
func (o *Tweet) SetOrganicMetrics(v TweetOrganicMetrics) {
	o.OrganicMetrics = &v
}

func (o Tweet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["text"] = o.Text
	}
	if o.AuthorId != nil {
		toSerialize["author_id"] = o.AuthorId
	}
	if o.InReplyToUserId != nil {
		toSerialize["in_reply_to_user_id"] = o.InReplyToUserId
	}
	if o.ReferencedTweets != nil {
		toSerialize["referenced_tweets"] = o.ReferencedTweets
	}
	if o.Attachments != nil {
		toSerialize["attachments"] = o.Attachments
	}
	if o.ContextAnnotations != nil {
		toSerialize["context_annotations"] = o.ContextAnnotations
	}
	if o.Withheld != nil {
		toSerialize["withheld"] = o.Withheld
	}
	if o.Geo != nil {
		toSerialize["geo"] = o.Geo
	}
	if o.Entities != nil {
		toSerialize["entities"] = o.Entities
	}
	if o.PublicMetrics != nil {
		toSerialize["public_metrics"] = o.PublicMetrics
	}
	if o.PossiblySensitive != nil {
		toSerialize["possibly_sensitive"] = o.PossiblySensitive
	}
	if o.Lang != nil {
		toSerialize["lang"] = o.Lang
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.NonPublicMetrics != nil {
		toSerialize["non_public_metrics"] = o.NonPublicMetrics
	}
	if o.PromotedMetrics != nil {
		toSerialize["promoted_metrics"] = o.PromotedMetrics
	}
	if o.OrganicMetrics != nil {
		toSerialize["organic_metrics"] = o.OrganicMetrics
	}
	return json.Marshal(toSerialize)
}

type NullableTweet struct {
	value *Tweet
	isSet bool
}

func (v NullableTweet) Get() *Tweet {
	return v.value
}

func (v *NullableTweet) Set(val *Tweet) {
	v.value = val
	v.isSet = true
}

func (v NullableTweet) IsSet() bool {
	return v.isSet
}

func (v *NullableTweet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTweet(val *Tweet) *NullableTweet {
	return &NullableTweet{value: val, isSet: true}
}

func (v NullableTweet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTweet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


