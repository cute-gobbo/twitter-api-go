/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// Place struct for Place
type Place struct {
	// The identifier for this place
	Id string `json:"id"`
	// The human readable name of this place.
	Name *string `json:"name,omitempty"`
	CountryCode *string `json:"country_code,omitempty"`
	PlaceType *PlaceType `json:"place_type,omitempty"`
	FullName string `json:"full_name"`
	Country *string `json:"country,omitempty"`
	ContainedWithin []string `json:"contained_within,omitempty"`
	Geo *Geo `json:"geo,omitempty"`
}

// NewPlace instantiates a new Place object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlace(id string, fullName string) *Place {
	this := Place{}
	this.Id = id
	this.FullName = fullName
	return &this
}

// NewPlaceWithDefaults instantiates a new Place object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaceWithDefaults() *Place {
	this := Place{}
	return &this
}

// GetId returns the Id field value
func (o *Place) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Place) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Place) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Place) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Place) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Place) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Place) SetName(v string) {
	o.Name = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *Place) GetCountryCode() string {
	if o == nil || o.CountryCode == nil {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Place) GetCountryCodeOk() (*string, bool) {
	if o == nil || o.CountryCode == nil {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *Place) HasCountryCode() bool {
	if o != nil && o.CountryCode != nil {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *Place) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetPlaceType returns the PlaceType field value if set, zero value otherwise.
func (o *Place) GetPlaceType() PlaceType {
	if o == nil || o.PlaceType == nil {
		var ret PlaceType
		return ret
	}
	return *o.PlaceType
}

// GetPlaceTypeOk returns a tuple with the PlaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Place) GetPlaceTypeOk() (*PlaceType, bool) {
	if o == nil || o.PlaceType == nil {
		return nil, false
	}
	return o.PlaceType, true
}

// HasPlaceType returns a boolean if a field has been set.
func (o *Place) HasPlaceType() bool {
	if o != nil && o.PlaceType != nil {
		return true
	}

	return false
}

// SetPlaceType gets a reference to the given PlaceType and assigns it to the PlaceType field.
func (o *Place) SetPlaceType(v PlaceType) {
	o.PlaceType = &v
}

// GetFullName returns the FullName field value
func (o *Place) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *Place) GetFullNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *Place) SetFullName(v string) {
	o.FullName = v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Place) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Place) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Place) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Place) SetCountry(v string) {
	o.Country = &v
}

// GetContainedWithin returns the ContainedWithin field value if set, zero value otherwise.
func (o *Place) GetContainedWithin() []string {
	if o == nil || o.ContainedWithin == nil {
		var ret []string
		return ret
	}
	return o.ContainedWithin
}

// GetContainedWithinOk returns a tuple with the ContainedWithin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Place) GetContainedWithinOk() ([]string, bool) {
	if o == nil || o.ContainedWithin == nil {
		return nil, false
	}
	return o.ContainedWithin, true
}

// HasContainedWithin returns a boolean if a field has been set.
func (o *Place) HasContainedWithin() bool {
	if o != nil && o.ContainedWithin != nil {
		return true
	}

	return false
}

// SetContainedWithin gets a reference to the given []string and assigns it to the ContainedWithin field.
func (o *Place) SetContainedWithin(v []string) {
	o.ContainedWithin = v
}

// GetGeo returns the Geo field value if set, zero value otherwise.
func (o *Place) GetGeo() Geo {
	if o == nil || o.Geo == nil {
		var ret Geo
		return ret
	}
	return *o.Geo
}

// GetGeoOk returns a tuple with the Geo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Place) GetGeoOk() (*Geo, bool) {
	if o == nil || o.Geo == nil {
		return nil, false
	}
	return o.Geo, true
}

// HasGeo returns a boolean if a field has been set.
func (o *Place) HasGeo() bool {
	if o != nil && o.Geo != nil {
		return true
	}

	return false
}

// SetGeo gets a reference to the given Geo and assigns it to the Geo field.
func (o *Place) SetGeo(v Geo) {
	o.Geo = &v
}

func (o Place) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CountryCode != nil {
		toSerialize["country_code"] = o.CountryCode
	}
	if o.PlaceType != nil {
		toSerialize["place_type"] = o.PlaceType
	}
	if true {
		toSerialize["full_name"] = o.FullName
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.ContainedWithin != nil {
		toSerialize["contained_within"] = o.ContainedWithin
	}
	if o.Geo != nil {
		toSerialize["geo"] = o.Geo
	}
	return json.Marshal(toSerialize)
}

type NullablePlace struct {
	value *Place
	isSet bool
}

func (v NullablePlace) Get() *Place {
	return v.value
}

func (v *NullablePlace) Set(val *Place) {
	v.value = val
	v.isSet = true
}

func (v NullablePlace) IsSet() bool {
	return v.isSet
}

func (v *NullablePlace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlace(val *Place) *NullablePlace {
	return &NullablePlace{value: val, isSet: true}
}

func (v NullablePlace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


