/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
	"fmt"
)

// PlaceType the model 'PlaceType'
type PlaceType string

// List of PlaceType
const (
	POI PlaceType = "poi"
	NEIGHBORHOOD PlaceType = "neighborhood"
	CITY PlaceType = "city"
	ADMIN PlaceType = "admin"
	COUNTRY PlaceType = "country"
	UNKNOWN PlaceType = "unknown"
)

// All allowed values of PlaceType enum
var AllowedPlaceTypeEnumValues = []PlaceType{
	"poi",
	"neighborhood",
	"city",
	"admin",
	"country",
	"unknown",
}

func (v *PlaceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlaceType(value)
	for _, existing := range AllowedPlaceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlaceType", value)
}

// NewPlaceTypeFromValue returns a pointer to a valid PlaceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlaceTypeFromValue(v string) (*PlaceType, error) {
	ev := PlaceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlaceType: valid values are %v", v, AllowedPlaceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlaceType) IsValid() bool {
	for _, existing := range AllowedPlaceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlaceType value
func (v PlaceType) Ptr() *PlaceType {
	return &v
}

type NullablePlaceType struct {
	value *PlaceType
	isSet bool
}

func (v NullablePlaceType) Get() *PlaceType {
	return v.value
}

func (v *NullablePlaceType) Set(val *PlaceType) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaceType) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaceType(val *PlaceType) *NullablePlaceType {
	return &NullablePlaceType{value: val, isSet: true}
}

func (v NullablePlaceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

