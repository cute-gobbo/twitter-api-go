/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// UserEntities A list of metadata found in the user's profile description.
type UserEntities struct {
	Url *UserEntitiesUrl `json:"url,omitempty"`
	Description *FullTextEntities `json:"description,omitempty"`
}

// NewUserEntities instantiates a new UserEntities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserEntities() *UserEntities {
	this := UserEntities{}
	return &this
}

// NewUserEntitiesWithDefaults instantiates a new UserEntities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserEntitiesWithDefaults() *UserEntities {
	this := UserEntities{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UserEntities) GetUrl() UserEntitiesUrl {
	if o == nil || o.Url == nil {
		var ret UserEntitiesUrl
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEntities) GetUrlOk() (*UserEntitiesUrl, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UserEntities) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given UserEntitiesUrl and assigns it to the Url field.
func (o *UserEntities) SetUrl(v UserEntitiesUrl) {
	o.Url = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UserEntities) GetDescription() FullTextEntities {
	if o == nil || o.Description == nil {
		var ret FullTextEntities
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEntities) GetDescriptionOk() (*FullTextEntities, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UserEntities) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given FullTextEntities and assigns it to the Description field.
func (o *UserEntities) SetDescription(v FullTextEntities) {
	o.Description = &v
}

func (o UserEntities) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableUserEntities struct {
	value *UserEntities
	isSet bool
}

func (v NullableUserEntities) Get() *UserEntities {
	return v.value
}

func (v *NullableUserEntities) Set(val *UserEntities) {
	v.value = val
	v.isSet = true
}

func (v NullableUserEntities) IsSet() bool {
	return v.isSet
}

func (v *NullableUserEntities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserEntities(val *UserEntities) *NullableUserEntities {
	return &NullableUserEntities{value: val, isSet: true}
}

func (v NullableUserEntities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserEntities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


