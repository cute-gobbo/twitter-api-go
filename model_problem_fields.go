/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// ProblemFields struct for ProblemFields
type ProblemFields struct {
	Type string `json:"type"`
	Title string `json:"title"`
	Detail string `json:"detail"`
}

// NewProblemFields instantiates a new ProblemFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemFields(type_ string, title string, detail string) *ProblemFields {
	this := ProblemFields{}
	this.Type = type_
	this.Title = title
	this.Detail = detail
	return &this
}

// NewProblemFieldsWithDefaults instantiates a new ProblemFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemFieldsWithDefaults() *ProblemFields {
	this := ProblemFields{}
	return &this
}

// GetType returns the Type field value
func (o *ProblemFields) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProblemFields) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProblemFields) SetType(v string) {
	o.Type = v
}

// GetTitle returns the Title field value
func (o *ProblemFields) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ProblemFields) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ProblemFields) SetTitle(v string) {
	o.Title = v
}

// GetDetail returns the Detail field value
func (o *ProblemFields) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *ProblemFields) GetDetailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *ProblemFields) SetDetail(v string) {
	o.Detail = v
}

func (o ProblemFields) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["detail"] = o.Detail
	}
	return json.Marshal(toSerialize)
}

type NullableProblemFields struct {
	value *ProblemFields
	isSet bool
}

func (v NullableProblemFields) Get() *ProblemFields {
	return v.value
}

func (v *NullableProblemFields) Set(val *ProblemFields) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemFields) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemFields(val *ProblemFields) *NullableProblemFields {
	return &NullableProblemFields{value: val, isSet: true}
}

func (v NullableProblemFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


