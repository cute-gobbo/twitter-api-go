/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

// UsersApiService UsersApi service
type UsersApiService service

type ApiFindUserByIdRequest struct {
	ctx context.Context
	ApiService *UsersApiService
	id string
	expansions *[]string
	tweetFields *[]string
	userFields *[]string
	mediaFields *[]string
	placeFields *[]string
	pollFields *[]string
}

// A comma separated list of fields to expand.
func (r ApiFindUserByIdRequest) Expansions(expansions []string) ApiFindUserByIdRequest {
	r.expansions = &expansions
	return r
}
// A comma separated list of Tweet fields to display.
func (r ApiFindUserByIdRequest) TweetFields(tweetFields []string) ApiFindUserByIdRequest {
	r.tweetFields = &tweetFields
	return r
}
// A comma separated list of User fields to display.
func (r ApiFindUserByIdRequest) UserFields(userFields []string) ApiFindUserByIdRequest {
	r.userFields = &userFields
	return r
}
// A comma separated list of Media fields to display.
func (r ApiFindUserByIdRequest) MediaFields(mediaFields []string) ApiFindUserByIdRequest {
	r.mediaFields = &mediaFields
	return r
}
// A comma separated list of Place fields to display.
func (r ApiFindUserByIdRequest) PlaceFields(placeFields []string) ApiFindUserByIdRequest {
	r.placeFields = &placeFields
	return r
}
// A comma separated list of Poll fields to display.
func (r ApiFindUserByIdRequest) PollFields(pollFields []string) ApiFindUserByIdRequest {
	r.pollFields = &pollFields
	return r
}

func (r ApiFindUserByIdRequest) Execute() (*SingleUserLookupResponse, *http.Response, error) {
	return r.ApiService.FindUserByIdExecute(r)
}

/*
FindUserById Return details for the specified users

This endpoint returns information about a user. Specify user by ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Required. A User ID.
 @return ApiFindUserByIdRequest
*/
func (a *UsersApiService) FindUserById(ctx context.Context, id string) ApiFindUserByIdRequest {
	return ApiFindUserByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SingleUserLookupResponse
func (a *UsersApiService) FindUserByIdExecute(r ApiFindUserByIdRequest) (*SingleUserLookupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SingleUserLookupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersApiService.FindUserById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/labs/2/users/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.expansions != nil {
		localVarQueryParams.Add("expansions", parameterToString(*r.expansions, "csv"))
	}
	if r.tweetFields != nil {
		localVarQueryParams.Add("tweet.fields", parameterToString(*r.tweetFields, "csv"))
	}
	if r.userFields != nil {
		localVarQueryParams.Add("user.fields", parameterToString(*r.userFields, "csv"))
	}
	if r.mediaFields != nil {
		localVarQueryParams.Add("media.fields", parameterToString(*r.mediaFields, "csv"))
	}
	if r.placeFields != nil {
		localVarQueryParams.Add("place.fields", parameterToString(*r.placeFields, "csv"))
	}
	if r.pollFields != nil {
		localVarQueryParams.Add("poll.fields", parameterToString(*r.pollFields, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindUserByUsernameRequest struct {
	ctx context.Context
	ApiService *UsersApiService
	username string
	expansions *[]string
	tweetFields *[]string
	userFields *[]string
	mediaFields *[]string
	placeFields *[]string
	pollFields *[]string
}

// A comma separated list of fields to expand.
func (r ApiFindUserByUsernameRequest) Expansions(expansions []string) ApiFindUserByUsernameRequest {
	r.expansions = &expansions
	return r
}
// A comma separated list of Tweet fields to display.
func (r ApiFindUserByUsernameRequest) TweetFields(tweetFields []string) ApiFindUserByUsernameRequest {
	r.tweetFields = &tweetFields
	return r
}
// A comma separated list of User fields to display.
func (r ApiFindUserByUsernameRequest) UserFields(userFields []string) ApiFindUserByUsernameRequest {
	r.userFields = &userFields
	return r
}
// A comma separated list of Media fields to display.
func (r ApiFindUserByUsernameRequest) MediaFields(mediaFields []string) ApiFindUserByUsernameRequest {
	r.mediaFields = &mediaFields
	return r
}
// A comma separated list of Place fields to display.
func (r ApiFindUserByUsernameRequest) PlaceFields(placeFields []string) ApiFindUserByUsernameRequest {
	r.placeFields = &placeFields
	return r
}
// A comma separated list of Poll fields to display.
func (r ApiFindUserByUsernameRequest) PollFields(pollFields []string) ApiFindUserByUsernameRequest {
	r.pollFields = &pollFields
	return r
}

func (r ApiFindUserByUsernameRequest) Execute() (*SingleUserLookupResponse, *http.Response, error) {
	return r.ApiService.FindUserByUsernameExecute(r)
}

/*
FindUserByUsername Return details for the specified users

This endpoint returns information about a user. Specify user by username.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param username Required. A username.
 @return ApiFindUserByUsernameRequest
*/
func (a *UsersApiService) FindUserByUsername(ctx context.Context, username string) ApiFindUserByUsernameRequest {
	return ApiFindUserByUsernameRequest{
		ApiService: a,
		ctx: ctx,
		username: username,
	}
}

// Execute executes the request
//  @return SingleUserLookupResponse
func (a *UsersApiService) FindUserByUsernameExecute(r ApiFindUserByUsernameRequest) (*SingleUserLookupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SingleUserLookupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersApiService.FindUserByUsername")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/labs/2/users/by/username/{username}"
	localVarPath = strings.Replace(localVarPath, "{"+"username"+"}", url.PathEscape(parameterToString(r.username, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.expansions != nil {
		localVarQueryParams.Add("expansions", parameterToString(*r.expansions, "csv"))
	}
	if r.tweetFields != nil {
		localVarQueryParams.Add("tweet.fields", parameterToString(*r.tweetFields, "csv"))
	}
	if r.userFields != nil {
		localVarQueryParams.Add("user.fields", parameterToString(*r.userFields, "csv"))
	}
	if r.mediaFields != nil {
		localVarQueryParams.Add("media.fields", parameterToString(*r.mediaFields, "csv"))
	}
	if r.placeFields != nil {
		localVarQueryParams.Add("place.fields", parameterToString(*r.placeFields, "csv"))
	}
	if r.pollFields != nil {
		localVarQueryParams.Add("poll.fields", parameterToString(*r.pollFields, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindUsersByIdRequest struct {
	ctx context.Context
	ApiService *UsersApiService
	ids *[]string
	expansions *[]string
	tweetFields *[]string
	userFields *[]string
	mediaFields *[]string
	placeFields *[]string
	pollFields *[]string
}

// Required. A list of User IDs, comma-separated. You can specify up to 100 IDs.
func (r ApiFindUsersByIdRequest) Ids(ids []string) ApiFindUsersByIdRequest {
	r.ids = &ids
	return r
}
// A comma separated list of fields to expand.
func (r ApiFindUsersByIdRequest) Expansions(expansions []string) ApiFindUsersByIdRequest {
	r.expansions = &expansions
	return r
}
// A comma separated list of Tweet fields to display.
func (r ApiFindUsersByIdRequest) TweetFields(tweetFields []string) ApiFindUsersByIdRequest {
	r.tweetFields = &tweetFields
	return r
}
// A comma separated list of User fields to display.
func (r ApiFindUsersByIdRequest) UserFields(userFields []string) ApiFindUsersByIdRequest {
	r.userFields = &userFields
	return r
}
// A comma separated list of Media fields to display.
func (r ApiFindUsersByIdRequest) MediaFields(mediaFields []string) ApiFindUsersByIdRequest {
	r.mediaFields = &mediaFields
	return r
}
// A comma separated list of Place fields to display.
func (r ApiFindUsersByIdRequest) PlaceFields(placeFields []string) ApiFindUsersByIdRequest {
	r.placeFields = &placeFields
	return r
}
// A comma separated list of Poll fields to display.
func (r ApiFindUsersByIdRequest) PollFields(pollFields []string) ApiFindUsersByIdRequest {
	r.pollFields = &pollFields
	return r
}

func (r ApiFindUsersByIdRequest) Execute() (*UserLookupResponse, *http.Response, error) {
	return r.ApiService.FindUsersByIdExecute(r)
}

/*
FindUsersById Return details for the specified users

This endpoint returns information about users. Specify users by their ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFindUsersByIdRequest
*/
func (a *UsersApiService) FindUsersById(ctx context.Context) ApiFindUsersByIdRequest {
	return ApiFindUsersByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserLookupResponse
func (a *UsersApiService) FindUsersByIdExecute(r ApiFindUsersByIdRequest) (*UserLookupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserLookupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersApiService.FindUsersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/labs/2/users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return localVarReturnValue, nil, reportError("ids is required and must be specified")
	}
	if len(*r.ids) < 1 {
		return localVarReturnValue, nil, reportError("ids must have at least 1 elements")
	}
	if len(*r.ids) > 100 {
		return localVarReturnValue, nil, reportError("ids must have less than 100 elements")
	}

	localVarQueryParams.Add("ids", parameterToString(*r.ids, "csv"))
	if r.expansions != nil {
		localVarQueryParams.Add("expansions", parameterToString(*r.expansions, "csv"))
	}
	if r.tweetFields != nil {
		localVarQueryParams.Add("tweet.fields", parameterToString(*r.tweetFields, "csv"))
	}
	if r.userFields != nil {
		localVarQueryParams.Add("user.fields", parameterToString(*r.userFields, "csv"))
	}
	if r.mediaFields != nil {
		localVarQueryParams.Add("media.fields", parameterToString(*r.mediaFields, "csv"))
	}
	if r.placeFields != nil {
		localVarQueryParams.Add("place.fields", parameterToString(*r.placeFields, "csv"))
	}
	if r.pollFields != nil {
		localVarQueryParams.Add("poll.fields", parameterToString(*r.pollFields, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindUsersByUsernameRequest struct {
	ctx context.Context
	ApiService *UsersApiService
	usernames *[]string
	expansions *[]string
	tweetFields *[]string
	userFields *[]string
	mediaFields *[]string
	placeFields *[]string
	pollFields *[]string
}

// Required . A list of usernames, comma-separated. You can specify up to 100 usernames.
func (r ApiFindUsersByUsernameRequest) Usernames(usernames []string) ApiFindUsersByUsernameRequest {
	r.usernames = &usernames
	return r
}
// A comma separated list of fields to expand.
func (r ApiFindUsersByUsernameRequest) Expansions(expansions []string) ApiFindUsersByUsernameRequest {
	r.expansions = &expansions
	return r
}
// A comma separated list of Tweet fields to display.
func (r ApiFindUsersByUsernameRequest) TweetFields(tweetFields []string) ApiFindUsersByUsernameRequest {
	r.tweetFields = &tweetFields
	return r
}
// A comma separated list of User fields to display.
func (r ApiFindUsersByUsernameRequest) UserFields(userFields []string) ApiFindUsersByUsernameRequest {
	r.userFields = &userFields
	return r
}
// A comma separated list of Media fields to display.
func (r ApiFindUsersByUsernameRequest) MediaFields(mediaFields []string) ApiFindUsersByUsernameRequest {
	r.mediaFields = &mediaFields
	return r
}
// A comma separated list of Place fields to display.
func (r ApiFindUsersByUsernameRequest) PlaceFields(placeFields []string) ApiFindUsersByUsernameRequest {
	r.placeFields = &placeFields
	return r
}
// A comma separated list of Poll fields to display.
func (r ApiFindUsersByUsernameRequest) PollFields(pollFields []string) ApiFindUsersByUsernameRequest {
	r.pollFields = &pollFields
	return r
}

func (r ApiFindUsersByUsernameRequest) Execute() (*UserLookupResponse, *http.Response, error) {
	return r.ApiService.FindUsersByUsernameExecute(r)
}

/*
FindUsersByUsername Return details for the specified users

This endpoint returns information about users. Specify users by their username.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFindUsersByUsernameRequest
*/
func (a *UsersApiService) FindUsersByUsername(ctx context.Context) ApiFindUsersByUsernameRequest {
	return ApiFindUsersByUsernameRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserLookupResponse
func (a *UsersApiService) FindUsersByUsernameExecute(r ApiFindUsersByUsernameRequest) (*UserLookupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserLookupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersApiService.FindUsersByUsername")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/labs/2/users/by"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.usernames == nil {
		return localVarReturnValue, nil, reportError("usernames is required and must be specified")
	}
	if len(*r.usernames) < 1 {
		return localVarReturnValue, nil, reportError("usernames must have at least 1 elements")
	}
	if len(*r.usernames) > 100 {
		return localVarReturnValue, nil, reportError("usernames must have less than 100 elements")
	}

	localVarQueryParams.Add("usernames", parameterToString(*r.usernames, "csv"))
	if r.expansions != nil {
		localVarQueryParams.Add("expansions", parameterToString(*r.expansions, "csv"))
	}
	if r.tweetFields != nil {
		localVarQueryParams.Add("tweet.fields", parameterToString(*r.tweetFields, "csv"))
	}
	if r.userFields != nil {
		localVarQueryParams.Add("user.fields", parameterToString(*r.userFields, "csv"))
	}
	if r.mediaFields != nil {
		localVarQueryParams.Add("media.fields", parameterToString(*r.mediaFields, "csv"))
	}
	if r.placeFields != nil {
		localVarQueryParams.Add("place.fields", parameterToString(*r.placeFields, "csv"))
	}
	if r.pollFields != nil {
		localVarQueryParams.Add("poll.fields", parameterToString(*r.pollFields, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
