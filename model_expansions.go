/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// Expansions struct for Expansions
type Expansions struct {
	Users []User `json:"users,omitempty"`
	Tweets []Tweet `json:"tweets,omitempty"`
	Places []Place `json:"places,omitempty"`
	Media []Media `json:"media,omitempty"`
	Polls []Poll `json:"polls,omitempty"`
}

// NewExpansions instantiates a new Expansions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpansions() *Expansions {
	this := Expansions{}
	return &this
}

// NewExpansionsWithDefaults instantiates a new Expansions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpansionsWithDefaults() *Expansions {
	this := Expansions{}
	return &this
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *Expansions) GetUsers() []User {
	if o == nil || o.Users == nil {
		var ret []User
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expansions) GetUsersOk() ([]User, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *Expansions) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []User and assigns it to the Users field.
func (o *Expansions) SetUsers(v []User) {
	o.Users = v
}

// GetTweets returns the Tweets field value if set, zero value otherwise.
func (o *Expansions) GetTweets() []Tweet {
	if o == nil || o.Tweets == nil {
		var ret []Tweet
		return ret
	}
	return o.Tweets
}

// GetTweetsOk returns a tuple with the Tweets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expansions) GetTweetsOk() ([]Tweet, bool) {
	if o == nil || o.Tweets == nil {
		return nil, false
	}
	return o.Tweets, true
}

// HasTweets returns a boolean if a field has been set.
func (o *Expansions) HasTweets() bool {
	if o != nil && o.Tweets != nil {
		return true
	}

	return false
}

// SetTweets gets a reference to the given []Tweet and assigns it to the Tweets field.
func (o *Expansions) SetTweets(v []Tweet) {
	o.Tweets = v
}

// GetPlaces returns the Places field value if set, zero value otherwise.
func (o *Expansions) GetPlaces() []Place {
	if o == nil || o.Places == nil {
		var ret []Place
		return ret
	}
	return o.Places
}

// GetPlacesOk returns a tuple with the Places field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expansions) GetPlacesOk() ([]Place, bool) {
	if o == nil || o.Places == nil {
		return nil, false
	}
	return o.Places, true
}

// HasPlaces returns a boolean if a field has been set.
func (o *Expansions) HasPlaces() bool {
	if o != nil && o.Places != nil {
		return true
	}

	return false
}

// SetPlaces gets a reference to the given []Place and assigns it to the Places field.
func (o *Expansions) SetPlaces(v []Place) {
	o.Places = v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *Expansions) GetMedia() []Media {
	if o == nil || o.Media == nil {
		var ret []Media
		return ret
	}
	return o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expansions) GetMediaOk() ([]Media, bool) {
	if o == nil || o.Media == nil {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *Expansions) HasMedia() bool {
	if o != nil && o.Media != nil {
		return true
	}

	return false
}

// SetMedia gets a reference to the given []Media and assigns it to the Media field.
func (o *Expansions) SetMedia(v []Media) {
	o.Media = v
}

// GetPolls returns the Polls field value if set, zero value otherwise.
func (o *Expansions) GetPolls() []Poll {
	if o == nil || o.Polls == nil {
		var ret []Poll
		return ret
	}
	return o.Polls
}

// GetPollsOk returns a tuple with the Polls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expansions) GetPollsOk() ([]Poll, bool) {
	if o == nil || o.Polls == nil {
		return nil, false
	}
	return o.Polls, true
}

// HasPolls returns a boolean if a field has been set.
func (o *Expansions) HasPolls() bool {
	if o != nil && o.Polls != nil {
		return true
	}

	return false
}

// SetPolls gets a reference to the given []Poll and assigns it to the Polls field.
func (o *Expansions) SetPolls(v []Poll) {
	o.Polls = v
}

func (o Expansions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	if o.Tweets != nil {
		toSerialize["tweets"] = o.Tweets
	}
	if o.Places != nil {
		toSerialize["places"] = o.Places
	}
	if o.Media != nil {
		toSerialize["media"] = o.Media
	}
	if o.Polls != nil {
		toSerialize["polls"] = o.Polls
	}
	return json.Marshal(toSerialize)
}

type NullableExpansions struct {
	value *Expansions
	isSet bool
}

func (v NullableExpansions) Get() *Expansions {
	return v.value
}

func (v *NullableExpansions) Set(val *Expansions) {
	v.value = val
	v.isSet = true
}

func (v NullableExpansions) IsSet() bool {
	return v.isSet
}

func (v *NullableExpansions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpansions(val *Expansions) *NullableExpansions {
	return &NullableExpansions{value: val, isSet: true}
}

func (v NullableExpansions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpansions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


