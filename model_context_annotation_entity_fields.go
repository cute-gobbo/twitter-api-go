/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// ContextAnnotationEntityFields Represents the data for the context annotation entity.
type ContextAnnotationEntityFields struct {
	// The unique id for a context annotation entity.
	Id string `json:"id"`
	// Name of the context annotation entity.
	Name *string `json:"name,omitempty"`
	// Description of the context annotation entity.
	Description *string `json:"description,omitempty"`
}

// NewContextAnnotationEntityFields instantiates a new ContextAnnotationEntityFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextAnnotationEntityFields(id string) *ContextAnnotationEntityFields {
	this := ContextAnnotationEntityFields{}
	this.Id = id
	return &this
}

// NewContextAnnotationEntityFieldsWithDefaults instantiates a new ContextAnnotationEntityFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextAnnotationEntityFieldsWithDefaults() *ContextAnnotationEntityFields {
	this := ContextAnnotationEntityFields{}
	return &this
}

// GetId returns the Id field value
func (o *ContextAnnotationEntityFields) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ContextAnnotationEntityFields) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ContextAnnotationEntityFields) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContextAnnotationEntityFields) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextAnnotationEntityFields) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContextAnnotationEntityFields) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ContextAnnotationEntityFields) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ContextAnnotationEntityFields) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextAnnotationEntityFields) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ContextAnnotationEntityFields) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ContextAnnotationEntityFields) SetDescription(v string) {
	o.Description = &v
}

func (o ContextAnnotationEntityFields) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableContextAnnotationEntityFields struct {
	value *ContextAnnotationEntityFields
	isSet bool
}

func (v NullableContextAnnotationEntityFields) Get() *ContextAnnotationEntityFields {
	return v.value
}

func (v *NullableContextAnnotationEntityFields) Set(val *ContextAnnotationEntityFields) {
	v.value = val
	v.isSet = true
}

func (v NullableContextAnnotationEntityFields) IsSet() bool {
	return v.isSet
}

func (v *NullableContextAnnotationEntityFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextAnnotationEntityFields(val *ContextAnnotationEntityFields) *NullableContextAnnotationEntityFields {
	return &NullableContextAnnotationEntityFields{value: val, isSet: true}
}

func (v NullableContextAnnotationEntityFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextAnnotationEntityFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


