/*
Tweets and Users

API Reference â€” Labs v2

API version: 2.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package twitterapi

import (
	"encoding/json"
)

// SingleTweetLookupResponse struct for SingleTweetLookupResponse
type SingleTweetLookupResponse struct {
	Data *Tweet `json:"data,omitempty"`
	Includes *Expansions `json:"includes,omitempty"`
	Errors []Problem `json:"errors,omitempty"`
}

// NewSingleTweetLookupResponse instantiates a new SingleTweetLookupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleTweetLookupResponse() *SingleTweetLookupResponse {
	this := SingleTweetLookupResponse{}
	return &this
}

// NewSingleTweetLookupResponseWithDefaults instantiates a new SingleTweetLookupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleTweetLookupResponseWithDefaults() *SingleTweetLookupResponse {
	this := SingleTweetLookupResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SingleTweetLookupResponse) GetData() Tweet {
	if o == nil || o.Data == nil {
		var ret Tweet
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleTweetLookupResponse) GetDataOk() (*Tweet, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SingleTweetLookupResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given Tweet and assigns it to the Data field.
func (o *SingleTweetLookupResponse) SetData(v Tweet) {
	o.Data = &v
}

// GetIncludes returns the Includes field value if set, zero value otherwise.
func (o *SingleTweetLookupResponse) GetIncludes() Expansions {
	if o == nil || o.Includes == nil {
		var ret Expansions
		return ret
	}
	return *o.Includes
}

// GetIncludesOk returns a tuple with the Includes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleTweetLookupResponse) GetIncludesOk() (*Expansions, bool) {
	if o == nil || o.Includes == nil {
		return nil, false
	}
	return o.Includes, true
}

// HasIncludes returns a boolean if a field has been set.
func (o *SingleTweetLookupResponse) HasIncludes() bool {
	if o != nil && o.Includes != nil {
		return true
	}

	return false
}

// SetIncludes gets a reference to the given Expansions and assigns it to the Includes field.
func (o *SingleTweetLookupResponse) SetIncludes(v Expansions) {
	o.Includes = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *SingleTweetLookupResponse) GetErrors() []Problem {
	if o == nil || o.Errors == nil {
		var ret []Problem
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleTweetLookupResponse) GetErrorsOk() ([]Problem, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *SingleTweetLookupResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Problem and assigns it to the Errors field.
func (o *SingleTweetLookupResponse) SetErrors(v []Problem) {
	o.Errors = v
}

func (o SingleTweetLookupResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Includes != nil {
		toSerialize["includes"] = o.Includes
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableSingleTweetLookupResponse struct {
	value *SingleTweetLookupResponse
	isSet bool
}

func (v NullableSingleTweetLookupResponse) Get() *SingleTweetLookupResponse {
	return v.value
}

func (v *NullableSingleTweetLookupResponse) Set(val *SingleTweetLookupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleTweetLookupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleTweetLookupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleTweetLookupResponse(val *SingleTweetLookupResponse) *NullableSingleTweetLookupResponse {
	return &NullableSingleTweetLookupResponse{value: val, isSet: true}
}

func (v NullableSingleTweetLookupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleTweetLookupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


